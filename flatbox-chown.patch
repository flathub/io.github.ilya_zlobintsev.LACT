From 6e959c7cab331a973430e0be5098a27948a1fdf4 Mon Sep 17 00:00:00 2001
From: Ilya Zlobintsev <ilya.zl@protonmail.com>
Date: Wed, 2 Jul 2025 09:48:25 +0300
Subject: [PATCH] feat: run chown as a host command from flatbox to work around
 apparmor restrictions

---
 lact-daemon/src/server.rs |  7 ++++++-
 lact-daemon/src/socket.rs | 28 +++++++++++++++++++++++++---
 2 files changed, 31 insertions(+), 4 deletions(-)

diff --git a/lact-daemon/src/server.rs b/lact-daemon/src/server.rs
index 43ad46b9..d484e4b2 100644
--- a/lact-daemon/src/server.rs
+++ b/lact-daemon/src/server.rs
@@ -42,7 +42,12 @@ impl Server {
 
         let handler = Handler::new(config).await?;
 
-        socket::set_permissions(&socket_path, &handler.config.read().await.daemon)?;
+        socket::set_permissions(&socket_path, &handler.config.read().await.daemon)
+            .await
+            .inspect_err(|_| {
+                // Clean up the socket if permissions failed to be set
+                socket::cleanup();
+            })?;
 
         Ok(Self {
             handler,
diff --git a/lact-daemon/src/socket.rs b/lact-daemon/src/socket.rs
index eb678cba..b5a05818 100644
--- a/lact-daemon/src/socket.rs
+++ b/lact-daemon/src/socket.rs
@@ -11,7 +11,10 @@ use std::{
 use tokio::net::UnixListener;
 use tracing::{debug, info};
 
-use crate::config;
+use crate::{
+    config,
+    system::{run_command, IS_FLATBOX},
+};
 
 pub fn get_socket_path() -> PathBuf {
     let uid = getuid();
@@ -54,7 +57,10 @@ pub fn listen() -> anyhow::Result<(UnixListener, PathBuf)> {
     Ok((listener, socket_path))
 }
 
-pub fn set_permissions(socket_path: &Path, daemon_config: &config::Daemon) -> anyhow::Result<()> {
+pub async fn set_permissions(
+    socket_path: &Path,
+    daemon_config: &config::Daemon,
+) -> anyhow::Result<()> {
     let group = daemon_config
         .admin_group
         .as_ref()
@@ -79,7 +85,23 @@ pub fn set_permissions(socket_path: &Path, daemon_config: &config::Daemon) -> an
 
     debug!("using gid {group} uid {user:?} for socket");
 
-    chown(socket_path, user, Some(group)).context("Could not set socket permissions")?;
+    if *IS_FLATBOX {
+        let owner_arg = match user {
+            Some(user) => format!("{}:{}", user.as_raw(), group.as_raw()),
+            None => format!(":{}", group.as_raw()),
+        };
+
+        let path = socket_path
+            .to_str()
+            .expect("Invalid socket path")
+            .trim_start_matches("/run/host/root");
+
+        run_command("chown", &[&owner_arg, path])
+            .await
+            .context("Could not set socket permissions")?;
+    } else {
+        chown(socket_path, user, Some(group)).context("Could not set socket permissions")?;
+    }
 
     Ok(())
 }
-- 
2.50.0

